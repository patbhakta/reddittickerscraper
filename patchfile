diff --git a/README.md b/README.md
index 1bf5368..6a528af 100644
--- a/README.md
+++ b/README.md
@@ -34,6 +34,23 @@ In the file `substoscrap.txt` specify what subreddits to analyze.
  
 There are 3 parts, a process to get the submissions and store them in Redis DB, one to process them, and then finally one to run the webserver.
 
+## Running with Docker
+
+- First, install Docker. 
+- Create a .env file with the following variables:
+
+```text
+REDDIT_CLIENT_ID=<your_client_id>
+REDDIT_SECRET=<your_secret>
+REDDIT_USERNAME=<your_username>
+REDDIT_PASSWORD=<your_password>
+```
+
+- Create and run the container:
+
+```
+docker-compose --env-file <path_to_your_env_file> up --build
+```
 
 #### Getting Submissions
 
diff --git a/docker-compose.yml b/docker-compose.yml
new file mode 100644
index 0000000..978d49c
--- /dev/null
+++ b/docker-compose.yml
@@ -0,0 +1,61 @@
+version: '3'
+
+services:
+  redis:
+    image: redis:latest
+    ports:
+      - '6379:6379'
+    expose:
+      - '6379'
+    networks:
+      - app-tier
+  
+  python-news:
+    build:
+      context: .
+      dockerfile: news/Dockerfile
+    volumes:
+      - .:/app
+      - ./common_files:/common_files
+    depends_on:
+      - redis
+    networks:
+      - app-tier
+    environment:
+      - REDDIT_CLIENT_ID=${REDDIT_CLIENT_ID}
+      - REDDIT_SECRET=${REDDIT_SECRET}
+      - REDDIT_USERNAME=${REDDIT_USERNAME}
+      - REDDIT_PASSWORD=${REDDIT_PASSWORD}
+  
+  python-process:
+    build:
+      context: .
+      dockerfile: process/Dockerfile
+    volumes:
+      - .:/app
+      - ./common_files:/common_files
+    depends_on:
+      - redis
+      - python-news
+    networks:
+      - app-tier
+  
+  python-web:
+    build:
+      context: .
+      dockerfile: web/Dockerfile
+    volumes:
+      - .:/app
+      - ./common_files:/common_files
+    ports:
+      - "5000:5000"
+    depends_on:
+      - redis
+      - python-news
+      - python-process
+    networks:
+      - app-tier
+
+networks:
+  app-tier:
+    driver: bridge
\ No newline at end of file
diff --git a/flask_example.py b/flask_example.py
index 5aa0d71..507442d 100644
--- a/flask_example.py
+++ b/flask_example.py
@@ -34,11 +34,8 @@ import process
 
 
 r = redis.Redis(
-host='localhost',
-port=6379,)
-
-r = redis.Redis(db=8)
-
+host='redis',
+port=6379,db=8)
 
 app = Flask(__name__)
 
@@ -130,7 +127,7 @@ def create_figure(day=7):
 
 
 def html_last_sent():
-    nlp = spacy.load("en_core_web_lg")
+    nlp = spacy.load("en_core_web_sm")
     processed_sentence = get_last_process()
     processed_sentence['body'] = processed_sentence['body'].strip().replace("\n", "  ")
 
@@ -186,4 +183,4 @@ def index():
 
 
 if __name__ == '__main__':
-    app.run()
+    app.run(host='0.0.0.0')
diff --git a/news.py b/news.py
index cabb364..ebc94a5 100644
--- a/news.py
+++ b/news.py
@@ -97,10 +97,8 @@ async_id = 0
 
 
 r = redis.Redis(
-host='localhost',
-port=6379,)
-
-r = redis.Redis(db=8)
+host='redis',
+port=6379,db=8)
 
 def add_to_redis(data_dic):
     with r.pipeline() as pipe:
@@ -127,13 +125,13 @@ def add_to_redis_id(content_id, items):
     r.save()
 
 
-async def get_posts(sub, c_id, c_secrets, store_csv=False, async_id=0, sort_type="hot", process_func=None, ticker_func=None):
+async def get_posts(sub, c_id, c_secrets,username, password, store_csv=False, async_id=0, sort_type="hot", process_func=None, ticker_func=None):
 
     reddit = asyncpraw.Reddit(client_id=c_id,     
                          client_secret=c_secrets,  
                          user_agent="Scrapping Reddit", 
-                         username = "",     
-                         password = "")     
+                         username = username,     
+                         password = password)     
 
     award_val = 5
     posts_indexed = 0
@@ -189,7 +187,7 @@ async def get_posts(sub, c_id, c_secrets, store_csv=False, async_id=0, sort_type
                 authors_content["posted"] = submission.id
 
                 dt = float_to_datetime(submission.created)
-                print('Created: {} id: {}, Post: "{}".'.format(dt, f"submi:{submission.id}", (submission.title[:40] + '..') if len(submission.title) > 40 else submission.title))
+                #print('Created: {} id: {}, Post: "{}".'.format(dt, f"submi:{submission.id}", (submission.title[:40] + '..') if len(submission.title) > 40 else submission.title))
 
                 posts_dict[f"submi:{submission.id}"] = post_contents
 
@@ -234,7 +232,7 @@ async def get_posts(sub, c_id, c_secrets, store_csv=False, async_id=0, sort_type
 
                             #print('Comment Storing: "{}", score: {} created: {} id: {}'.format((comment.body[:40] + '..') if len(comment.body) > 40 else comment.body, comments_contents["comment_score"], comment.created, comment.id))
                             dtc = float_to_datetime(comment.created)
-                            print('Created: {} id: {}, Post: "{}".'.format(dtc, f"comment:{comment.id}", (comment.body[:40] + '..') if len(comment.body) > 40 else comment.body))
+                            #print('Created: {} id: {}, Post: "{}".'.format(dtc, f"comment:{comment.id}", (comment.body[:40] + '..') if len(comment.body) > 40 else comment.body))
 
                             authors_content = {}
 
@@ -289,8 +287,8 @@ async def get_stream_posts(sub, c_id, c_secrets,  async_id=0):
     reddit = asyncpraw.Reddit(client_id=c_id,      # your client id
                          client_secret=c_secrets,  #your client secret
                          user_agent="Scrapping Reddit", #user agent name
-                         username = "",     # your reddit username
-                         password = "")     # your reddit password
+                         username = "PM_ME_YOUR_OTC_PENNY",     # your reddit username
+                         password = "qm-3cFZ@")     # your reddit password
 
 
     subreddit = await reddit.subreddit("AskReddit")
@@ -346,26 +344,30 @@ def test_data(text):
 
 
 
-async def reddit_get_subs(subs, c_id, c_secret):
-    res = await asyncio.gather(*(get_posts(sub, c_id, c_secret, async_id=idx, ticker_func=process_tickers) for idx, sub in enumerate(subs)))
+async def reddit_get_subs(subs, c_id, c_secret, username, password):
+    res = await asyncio.gather(*(get_posts(sub, c_id, c_secret, username, password, async_id=idx, ticker_func=process_tickers) for idx, sub in enumerate(subs)))
     return list(res)
 
 
 
 if __name__ == '__main__':
 
-    if(len(sys.argv) != 3):
-        print("Wrong number of arguments, python news.py <client_id> <client_secret>")
+    print(sys.argv)
+
+    if(len(sys.argv) != 5):
+        print("Wrong number of arguments, python news.py <client_id> <client_secret> <username> <password>")
     else:
     
         client_id = sys.argv[1]
         client_secret = sys.argv[2]
+        username = sys.argv[3]
+        password = sys.argv[4]
         
         subs = []
 
         with open('substoscrap.txt') as f:
             subs = [line.rstrip() for line in f]
         
-        results = asyncio.run(reddit_get_subs(subs, client_id, client_secret))
+        results = asyncio.run(reddit_get_subs(subs, client_id, client_secret, username, password))
 
 
diff --git a/news/Dockerfile b/news/Dockerfile
new file mode 100644
index 0000000..95e4054
--- /dev/null
+++ b/news/Dockerfile
@@ -0,0 +1,21 @@
+FROM ubuntu:20.04
+
+RUN apt-get update -y
+RUN apt-get install software-properties-common -y
+RUN apt-add-repository universe
+RUN apt-get update
+RUN apt-get install -y python3-pip python-dev build-essential
+RUN apt-get install libpangocairo-1.0-0 -y
+RUN apt-get install git -y
+
+WORKDIR /app
+
+COPY ./news .
+
+COPY requirements.txt .
+
+RUN pip3 install -r requirements.txt
+
+RUN python3.8 -m spacy download en_core_web_sm
+
+CMD python3.8 news.py $REDDIT_CLIENT_ID $REDDIT_SECRET $REDDIT_USERNAME $REDDIT_PASSWORD
\ No newline at end of file
diff --git a/process.py b/process.py
index f5e09f2..587cec6 100644
--- a/process.py
+++ b/process.py
@@ -21,11 +21,8 @@ from nltk.sentiment.vader import SentimentIntensityAnalyzer
 import news
 
 r = redis.Redis(
-host='localhost',
-port=6379,)
-
-r = redis.Redis(db=8)
-
+host='redis',
+port=6379,db=8)
 
 def create_pandas():
     data_all = []
@@ -66,7 +63,7 @@ def process_tickers(text):
     return list_tickers
 
 
-nlp = spacy.load("en_core_web_lg")
+nlp = spacy.load("en_core_web_sm")
 
 def sentiment(row, ret_doc=False):
     tickers_ment = row['tickers']
@@ -154,13 +151,17 @@ def processed_df():
 
 async def processing_last():
     while True:
-        last_processed, last_processed_3, last_processed_1 = processed_df()
-        print('Processing -> Storing processed Files')
-        last_processed.to_pickle('tickers_df_7.p')
-        last_processed_3.to_pickle('tickers_df_3.p')
-        last_processed_1.to_pickle('tickers_df_1.p')
-        print('Finished Processing awaiting 120secs')
-        await asyncio.sleep(120)
+        try:
+            last_processed, last_processed_3, last_processed_1 = processed_df()
+            print('Processing -> Storing processed Files')
+            last_processed.to_pickle('tickers_df_7.p')
+            last_processed_3.to_pickle('tickers_df_3.p')
+            last_processed_1.to_pickle('tickers_df_1.p')
+            print('Finished Processing awaiting 120secs')
+            await asyncio.sleep(120)
+        except:
+            print('exception... waiting for data')
+            pass
         
 
 
diff --git a/process/Dockerfile b/process/Dockerfile
new file mode 100644
index 0000000..c66ebec
--- /dev/null
+++ b/process/Dockerfile
@@ -0,0 +1,21 @@
+FROM ubuntu:20.04
+
+RUN apt-get update -y
+RUN apt-get install software-properties-common -y
+RUN apt-add-repository universe
+RUN apt-get update
+RUN apt-get install -y python3-pip python-dev build-essential
+RUN apt-get install libpangocairo-1.0-0 -y
+RUN apt-get install git -y
+
+WORKDIR /app
+
+COPY requirements.txt .
+
+COPY ./process .
+
+RUN pip3 install -r requirements.txt
+
+RUN python3.8 -m spacy download en_core_web_sm
+
+CMD python3.8 process.py
\ No newline at end of file
diff --git a/requeriments.txt b/requirements.txt
similarity index 100%
rename from requeriments.txt
rename to requirements.txt
diff --git a/substoscrap.txt b/substoscrap.txt
index aade79a..4acdee5 100644
--- a/substoscrap.txt
+++ b/substoscrap.txt
@@ -2,4 +2,5 @@ options
 thetagang
 stocks
 stockmarket
-wallstreetbets
\ No newline at end of file
+wallstreetbets
+pennystocks
\ No newline at end of file
diff --git a/web/Dockerfile b/web/Dockerfile
new file mode 100644
index 0000000..0b48b0f
--- /dev/null
+++ b/web/Dockerfile
@@ -0,0 +1,21 @@
+FROM ubuntu:20.04
+
+RUN apt-get update -y
+RUN apt-get install software-properties-common -y
+RUN apt-add-repository universe
+RUN apt-get update
+RUN apt-get install -y python3-pip python-dev build-essential
+RUN apt-get install libpangocairo-1.0-0 -y
+RUN apt-get install git -y
+
+WORKDIR /app
+
+COPY requirements.txt .
+
+RUN pip3 install -r requirements.txt
+
+RUN python3.8 -m spacy download en_core_web_sm
+
+EXPOSE 5000
+
+CMD python3.8 flask_example.py
\ No newline at end of file
